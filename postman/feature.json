{
	"info": {
		"_postman_id": "f41f7624-7f35-4d5b-ad75-7136743251ec",
		"name": "feature",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25475634"
	},
	"item": [
		{
			"name": "Добавить лайк, когда нет юзера",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function() {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"    pm.expect(pm.response.code).to.eql(404)\r",
							"});\r",
							"\r",
							"pm.test(\"Test response body\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.status, '\"status\" содержать').to.eql('NOT_FOUND');\r",
							"    pm.expect(jsonData.reason, '\"reason\" содержать').to.eql('The required object was not found.');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/likes/events/:eventId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"likes",
						"events",
						":eventId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "140"
						},
						{
							"key": "eventId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавить лайк, когда нет мероприятия",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function() {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"    pm.expect(pm.response.code).to.eql(404)\r",
							"});\r",
							"\r",
							"pm.test(\"Test response body\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.status, '\"status\" содержать').to.eql('NOT_FOUND');\r",
							"    pm.expect(jsonData.reason, '\"reason\" содержать').to.eql('The required object was not found.');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/likes/events/:eventId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"likes",
						"events",
						":eventId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "1"
						},
						{
							"key": "eventId",
							"value": "190"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавить лайк собственному событию",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function() {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"    pm.expect(pm.response.code).to.eql(409)\r",
							"});\r",
							"\r",
							"pm.test(\"Test response body\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.status, '\"status\" содержать').to.eql('CONFLICT');\r",
							"    pm.expect(jsonData.reason, '\"reason\" содержать').to.eql('Integrity constraint has been violated.');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/likes/events/:eventId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"likes",
						"events",
						":eventId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "2"
						},
						{
							"key": "eventId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавить лайк, при условии что пользователь не был на ивенте",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function() {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"    pm.expect(pm.response.code).to.eql(409)\r",
							"});\r",
							"\r",
							"pm.test(\"Test response body\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.status, '\"status\" содержать').to.eql('CONFLICT');\r",
							"    pm.expect(jsonData.reason, '\"reason\" содержать').to.eql('Integrity constraint has been violated.');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/likes/events/:eventId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"likes",
						"events",
						":eventId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "124"
						},
						{
							"key": "eventId",
							"value": "97"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавить лайк ивенту 85 от юзера 102",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function() {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"    pm.expect(pm.response.code).to.eql(201)\r",
							"});\r",
							"\r",
							"pm.test(\"Test create like\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id, '\"id\" содержать').to.not.eql(null);\r",
							"    pm.expect(jsonData.userId, '\"userId\" содержать').to.eql(102);\r",
							"    pm.expect(jsonData.eventId, '\"eventId\" содержать').to.eql(85);\r",
							"    pm.expect(jsonData.isPositive, '\"isPositive\" содержать').to.eql(true);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/likes/events/:eventId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"likes",
						"events",
						":eventId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "102"
						},
						{
							"key": "eventId",
							"value": "85"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавить лайк ивенту 5 от юзера 13",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function() {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"    pm.expect(pm.response.code).to.eql(201)\r",
							"});\r",
							"\r",
							"pm.test(\"Test create like\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id, '\"id\" содержать').to.not.eql(null);\r",
							"    pm.expect(jsonData.userId, '\"userId\" содержать').to.eql(13);\r",
							"    pm.expect(jsonData.eventId, '\"eventId\" содержать').to.eql(5);\r",
							"    pm.expect(jsonData.isPositive, '\"isPositive\" содержать').to.eql(true);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/likes/events/:eventId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"likes",
						"events",
						":eventId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "13"
						},
						{
							"key": "eventId",
							"value": "5"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавить дизлайк ивенту 7 от юзера 16",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function() {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"    pm.expect(pm.response.code).to.eql(201)\r",
							"});\r",
							"\r",
							"pm.test(\"Test create like\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id, '\"id\" содержать').to.not.eql(null);\r",
							"    pm.expect(jsonData.userId, '\"userId\" содержать').to.eql(16);\r",
							"    pm.expect(jsonData.eventId, '\"eventId\" содержать').to.eql(7);\r",
							"    pm.expect(jsonData.isPositive, '\"isPositive\" содержать').to.eql(false);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/likes/events/:eventId?isPositive=false",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"likes",
						"events",
						":eventId"
					],
					"query": [
						{
							"key": "isPositive",
							"value": "false"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "16"
						},
						{
							"key": "eventId",
							"value": "7"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавить дизлайк ивенту 83 от юзера 98",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function() {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"    pm.expect(pm.response.code).to.eql(201)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/likes/events/:eventId?isPositive=false",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"likes",
						"events",
						":eventId"
					],
					"query": [
						{
							"key": "isPositive",
							"value": "false"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "98"
						},
						{
							"key": "eventId",
							"value": "83"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получить топ по юзерам ASC size 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function() {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"    pm.expect(pm.response.code).to.eql(200)\r",
							"});\r",
							"\r",
							"pm.test(\"Test get top users\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[0].id, '\"id\" 1 юзера').to.eql(15);\r",
							"    pm.expect(jsonData[0].rate, '\"rate\" 1 юзера').to.eql(-1);\r",
							"    pm.expect(jsonData[1].id, '\"id\" 2 юзера').to.eql(97);\r",
							"    pm.expect(jsonData[1].rate, '\"rate\" 2 юзера').to.eql(-1);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/top?size=2&sort=ASC",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"top"
					],
					"query": [
						{
							"key": "size",
							"value": "2"
						},
						{
							"key": "sort",
							"value": "ASC"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получить топ по ивентам ASC size 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function() {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"    pm.expect(pm.response.code).to.eql(200)\r",
							"});\r",
							"\r",
							"pm.test(\"Test get top events\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[0].id, '\"id\" 1 ивента').to.eql(5);\r",
							"    pm.expect(jsonData[0].rate, '\"rate\" 1 ивента').to.eql(1);\r",
							"    pm.expect(jsonData[1].id, '\"id\" 2 ивента').to.eql(85);\r",
							"    pm.expect(jsonData[1].rate, '\"rate\" 2 ивента').to.eql(1);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/events/top?size=2&rate=ASC",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"events",
						"top"
					],
					"query": [
						{
							"key": "size",
							"value": "2"
						},
						{
							"key": "rate",
							"value": "ASC"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Удалить несуществующую отметку",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function() {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"    pm.expect(pm.response.code).to.eql(404)\r",
							"});\r",
							"\r",
							"pm.test(\"Test delete like\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.status, '\"status\" содержать').to.eql('NOT_FOUND');\r",
							"    pm.expect(jsonData.reason, '\"reason\" содержать').to.eql('The required object was not found.');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/likes/events/:eventId?isPositive=false",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"likes",
						"events",
						":eventId"
					],
					"query": [
						{
							"key": "isPositive",
							"value": "false"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "5"
						},
						{
							"key": "eventId",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Удалить лайк ивенту 185 от юзера 102",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 204\", function() {\r",
							"    pm.expect(pm.response.code).to.eql(204)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/likes/events/:eventId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"likes",
						"events",
						":eventId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "102"
						},
						{
							"key": "eventId",
							"value": "85"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получить топ по ивентам ASC size 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function() {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"    pm.expect(pm.response.code).to.eql(200)\r",
							"});\r",
							"\r",
							"pm.test(\"Test get top events\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[0].id, '\"id\" 1 ивента').to.eql(5);\r",
							"    pm.expect(jsonData[0].rate, '\"rate\" 1 ивента').to.eql(1);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/events/top?size=1&rate=ASC",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"events",
						"top"
					],
					"query": [
						{
							"key": "size",
							"value": "1"
						},
						{
							"key": "rate",
							"value": "ASC"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получить топ по юзерам DESC size 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function() {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"    pm.expect(pm.response.code).to.eql(200)\r",
							"});\r",
							"\r",
							"pm.test(\"Test get top users\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[0].id, '\"id\" 1 юзера').to.eql(12);\r",
							"    pm.expect(jsonData[0].rate, '\"rate\" 1 юзера').to.eql(1);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/top?size=1",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"top"
					],
					"query": [
						{
							"key": "size",
							"value": "1"
						}
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080"
		}
	]
}